name: Build and Test mod_replace

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu-version: ['20.04', '22.04', '24.04']
        apache-version: ['2.4']
        
    container:
      image: ubuntu:${{ matrix.ubuntu-version }}
      
    steps:
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y \
          build-essential \
          cmake \
          git \
          apache2-dev \
          libapr1-dev \
          libaprutil1-dev \
          valgrind \
          pkg-config \
          apache2 \
          curl
          
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure build environment
      run: |
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV
        
    - name: Build project
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        
    - name: Run tests
      run: |
        cd build
        # Run Aho-Corasick algorithm tests
        ./test_aho_corasick
        
        # Run standalone APR tests
        ./test_valgrind
        
        # Run CTest suite
        ctest --output-on-failure
        
    - name: Run memory leak tests
      run: |
        cd build
        make valgrind-aho-corasick
        
        # Check valgrind results
        if grep -q "ERROR SUMMARY: 0 errors" valgrind-aho-corasick.log; then
          echo "✅ No memory leaks detected"
        else
          echo "❌ Memory leaks detected"
          cat valgrind-aho-corasick.log
          exit 1
        fi
        
    - name: Test Apache module installation
      run: |
        cd build
        
        # Install the module
        cp mod_replace.so /usr/lib/apache2/modules/
        
        # Create module configuration
        echo "LoadModule replace_module /usr/lib/apache2/modules/mod_replace.so" > /etc/apache2/mods-available/replace.load
        echo "# mod_replace configuration" > /etc/apache2/mods-available/replace.conf
        
        # Enable required modules
        a2enmod headers
        a2enmod replace
        
        # Test Apache configuration
        apache2ctl configtest
        
        # Start Apache in background for testing
        service apache2 start
        
        # Basic connectivity test
        curl -f http://localhost/ || echo "Apache test completed"
        
    - name: Create test configuration
      run: |
        # Create a test HTML file
        mkdir -p /var/www/html/test
        cat > /var/www/html/test/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head><title>mod_replace Test</title></head>
        <body>
        <h1>Test Page</h1>
        <p>Placeholder: {{TEST_PLACEHOLDER}}</p>
        <p>Variable: ${SERVER_SOFTWARE}</p>
        </body>
        </html>
        EOF
        
        # Create test configuration
        cat > /etc/apache2/sites-available/mod-replace-test.conf << 'EOF'
        <VirtualHost *:80>
            DocumentRoot /var/www/html/test
            
            <Directory "/var/www/html/test">
                ReplaceEnable On
                ReplaceRule "{{TEST_PLACEHOLDER}}" "Replacement Successful"
                ReplaceRule "${SERVER_SOFTWARE}" "Apache/2.4 (Test)"
                
                <FilesMatch "\.html$">
                    SetOutputFilter REPLACE
                </FilesMatch>
            </Directory>
        </VirtualHost>
        EOF
        
        # Enable test site
        a2ensite mod-replace-test
        service apache2 reload
        
    - name: Test module functionality
      run: |
        # Test replacement functionality
        response=$(curl -s http://localhost/index.html)
        
        if echo "$response" | grep -q "Replacement Successful"; then
          echo "✅ Text replacement working"
        else
          echo "❌ Text replacement failed"
          echo "Response: $response"
          exit 1
        fi
        
    - name: Package artifacts
      if: matrix.ubuntu-version == '22.04'
      run: |
        cd build
        mkdir -p artifacts
        cp mod_replace.so artifacts/
        cp libaho_corasick.a artifacts/
        
        # Create package info
        cat > artifacts/build-info.txt << EOF
        Build Information:
        - Ubuntu Version: ${{ matrix.ubuntu-version }}
        - Apache Version: ${{ matrix.apache-version }}
        - Build Date: $(date)
        - Git Commit: ${GITHUB_SHA}
        - Compiler: $(gcc --version | head -n1)
        EOF
        
    - name: Upload build artifacts
      if: matrix.ubuntu-version == '22.04'
      uses: actions/upload-artifact@v4
      with:
        name: mod_replace-ubuntu-${{ matrix.ubuntu-version }}
        path: build/artifacts/
        retention-days: 30

  build-rockylinux:
    name: Build on Rocky Linux 9
    runs-on: ubuntu-latest
    container:
      image: rockylinux:9
      
    steps:
    - name: Install system dependencies
      run: |
        dnf update -y
        dnf groupinstall -y "Development Tools"
        dnf install -y \
          cmake \
          git \
          httpd-devel \
          apr-devel \
          apr-util-devel \
          valgrind \
          pkg-config \
          httpd \
          curl \
          which file
          
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build project
      run: |
        mkdir -p build
        cd build
        cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr
        make -j$(nproc)
        
    - name: Run tests
      run: |
        cd build
        ./test_aho_corasick
        ./test_valgrind
        ctest --output-on-failure
        
    - name: Run memory leak tests
      run: |
        cd build
        make valgrind-aho-corasick
        
        if grep -q "ERROR SUMMARY: 0 errors" valgrind-aho-corasick.log; then
          echo "✅ No memory leaks detected"
        else
          echo "❌ Memory leaks detected"
          cat valgrind-aho-corasick.log
          exit 1
        fi
        
    - name: Test Apache module installation
      run: |
        cd build
        
        # Install module
        cp mod_replace.so /usr/lib64/httpd/modules/
        
        # Create module configuration
        cat > /etc/httpd/conf.modules.d/00-replace.conf << 'EOF'
        LoadModule replace_module modules/mod_replace.so
        EOF
        
        # Test Apache configuration
        httpd -t
        
        # Start Apache
        httpd -D FOREGROUND &
        APACHE_PID=$!
        sleep 2
        
        # Basic test
        curl -f http://localhost/ || echo "Apache test completed"
        
        # Stop Apache
        kill $APACHE_PID || true
        
    - name: Package artifacts
      run: |
        cd build
        mkdir -p artifacts
        cp mod_replace.so artifacts/
        cp libaho_corasick.a artifacts/
        
        cat > artifacts/build-info.txt << EOF
        Build Information:
        - OS: Rocky Linux 9
        - Build Date: $(date)
        - Git Commit: ${GITHUB_SHA}
        - Compiler: $(gcc --version | head -n1)
        EOF
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mod_replace-rockylinux-9
        path: build/artifacts/
        retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-ubuntu]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan with CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: c
        
    - name: Install dependencies for analysis
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-dev libapr1-dev cmake build-essential
        
    - name: Build for analysis
      run: |
        mkdir build && cd build
        cmake ..
        make
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-ubuntu, build-rockylinux, security-scan]
    if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download Ubuntu artifacts
      uses: actions/download-artifact@v4
      with:
        name: mod_replace-ubuntu-22.04
        path: ./ubuntu-artifacts
        
    - name: Download Rocky Linux artifacts
      uses: actions/download-artifact@v4
      with:
        name: mod_replace-rockylinux-9  
        path: ./rockylinux-artifacts
        
    - name: Create release packages
      run: |
        # Create Ubuntu package
        cd ubuntu-artifacts
        tar -czf ../mod_replace-ubuntu-22.04.tar.gz *
        cd ..
        
        # Create Rocky Linux package
        cd rockylinux-artifacts
        tar -czf ../mod_replace-rockylinux-9.tar.gz *
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          mod_replace-ubuntu-22.04.tar.gz
          mod_replace-rockylinux-9.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload release assets (for published releases)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./mod_replace-ubuntu-22.04.tar.gz
        asset_name: mod_replace-ubuntu-22.04.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Rocky Linux release assets (for published releases)
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./mod_replace-rockylinux-9.tar.gz
        asset_name: mod_replace-rockylinux-9.tar.gz
        asset_content_type: application/gzip